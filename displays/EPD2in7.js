const EPDBase = require('../EPDBase');

class EPD2in7 extends EPDBase {
    constructor(options = {}) {
        super(options);

        this.width = 176;
        this.height = 264;
        this.colorMode = options.colorMode || 'mono'; // 'mono' or '4gray'
        this.bitsPerPixel = this.colorMode === '4gray' ? 2 : 1;

        this.initializeBuffer();
    }

    async initDisplay() {
        await this.waitUntilIdle();

        // Software reset
        await this.sendCommand(0x12);
        await this.waitUntilIdle();

        // Driver output control
        await this.sendCommand(0x01);
        await this.sendData([(this.height - 1) % 256, Math.floor((this.height - 1) / 256), 0x00]);

        // Booster soft start control
        await this.sendCommand(0x0C);
        await this.sendData([0xD7, 0xD6, 0x9D]);

        // VCOM setting
        await this.sendCommand(0x2C);
        await this.sendData(0xA8);

        // Write LUT register
        if (this.colorMode === '4gray') {
            await this.setLut4Gray();
        } else {
            await this.setLutMono();
        }

        // Data entry mode setting
        await this.sendCommand(0x11);
        await this.sendData(0x01);

        // Set RAM X - address start / end position
        await this.sendCommand(0x44);
        await this.sendData([0x00, Math.floor((this.width - 1) / 8)]);

        // Set RAM Y - address start / end position
        await this.sendCommand(0x45);
        await this.sendData([0x00, 0x00, (this.height - 1) % 256, Math.floor((this.height - 1) / 256)]);

        // Set cursor position
        await this.sendCommand(0x4E);
        await this.sendData(0x00);
        await this.sendCommand(0x4F);
        await this.sendData([0x00, 0x00]);

        await this.waitUntilIdle();
    }

    async setLutMono() {
        const lut_vcom_dc = [
            0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x05,
            0x00, 0x32, 0x32, 0x00, 0x00, 0x02, 0x00, 0x0F,
            0x0F, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00
        ];

        const lut_ww = [
            0x50, 0x0F, 0x0F, 0x00, 0x00, 0x05, 0x60, 0x32,
            0x32, 0x00, 0x00, 0x02, 0xA0, 0x0F, 0x0F, 0x00,
            0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00
        ];

        const lut_bw = [
            0x50, 0x0F, 0x0F, 0x00, 0x00, 0x05, 0x60, 0x32,
            0x32, 0x00, 0x00, 0x02, 0xA0, 0x0F, 0x0F, 0x00,
            0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00
        ];

        const lut_wb = [
            0xA0, 0x0F, 0x0F, 0x00, 0x00, 0x05, 0x60, 0x32,
            0x32, 0x00, 0x00, 0x02, 0x50, 0x0F, 0x0F, 0x00,
            0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00
        ];

        const lut_bb = [
            0x20, 0x0F, 0x0F, 0x00, 0x00, 0x05, 0x60, 0x32,
            0x32, 0x00, 0x00, 0x02, 0x50, 0x0F, 0x0F, 0x00,
            0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00
        ];

        await this.sendCommand(0x20);
        for (let i = 0; i < 44; i++) {
            await this.sendData(lut_vcom_dc[i]);
        }

        await this.sendCommand(0x21);
        for (let i = 0; i < 42; i++) {
            await this.sendData(lut_ww[i]);
        }

        await this.sendCommand(0x22);
        for (let i = 0; i < 42; i++) {
            await this.sendData(lut_bw[i]);
        }

        await this.sendCommand(0x23);
        for (let i = 0; i < 42; i++) {
            await this.sendData(lut_wb[i]);
        }

        await this.sendCommand(0x24);
        for (let i = 0; i < 42; i++) {
            await this.sendData(lut_bb[i]);
        }
    }

    async setLut4Gray() {
        const lut_vcom_dc_4gray = [
            0x00, 0x0A, 0x00, 0x00, 0x00, 0x01,
            0x60, 0x14, 0x14, 0x00, 0x00, 0x01,
            0x00, 0x14, 0x00, 0x00, 0x00, 0x01,
            0x00, 0x13, 0x0A, 0x01, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ];

        const lut_ww_4gray = [
            0x40, 0x0A, 0x00, 0x00, 0x00, 0x01,
            0x90, 0x14, 0x14, 0x00, 0x00, 0x01,
            0x10, 0x14, 0x0A, 0x00, 0x00, 0x01,
            0xA0, 0x13, 0x01, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ];

        const lut_bw_4gray = [
            0x40, 0x0A, 0x00, 0x00, 0x00, 0x01,
            0x90, 0x14, 0x14, 0x00, 0x00, 0x01,
            0x00, 0x14, 0x0A, 0x00, 0x00, 0x01,
            0x99, 0x0C, 0x01, 0x03, 0x04, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ];

        const lut_wb_4gray = [
            0x40, 0x0A, 0x00, 0x00, 0x00, 0x01,
            0x90, 0x14, 0x14, 0x00, 0x00, 0x01,
            0x00, 0x14, 0x0A, 0x00, 0x00, 0x01,
            0x99, 0x0B, 0x04, 0x04, 0x01, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ];

        const lut_bb_4gray = [
            0x80, 0x0A, 0x00, 0x00, 0x00, 0x01,
            0x90, 0x14, 0x14, 0x00, 0x00, 0x01,
            0x20, 0x14, 0x0A, 0x00, 0x00, 0x01,
            0x50, 0x13, 0x01, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ];

        await this.sendCommand(0x20);
        for (let i = 0; i < 42; i++) {
            await this.sendData(lut_vcom_dc_4gray[i]);
        }

        await this.sendCommand(0x21);
        for (let i = 0; i < 42; i++) {
            await this.sendData(lut_ww_4gray[i]);
        }

        await this.sendCommand(0x22);
        for (let i = 0; i < 42; i++) {
            await this.sendData(lut_bw_4gray[i]);
        }

        await this.sendCommand(0x23);
        for (let i = 0; i < 42; i++) {
            await this.sendData(lut_wb_4gray[i]);
        }

        await this.sendCommand(0x24);
        for (let i = 0; i < 42; i++) {
            await this.sendData(lut_bb_4gray[i]);
        }
    }

    async displayImage() {
        // Set cursor position
        await this.sendCommand(0x4E);
        await this.sendData(0x00);
        await this.sendCommand(0x4F);
        await this.sendData([0x00, 0x00]);

        // Write RAM
        await this.sendCommand(0x24);

        // Send image data
        const chunkSize = 2048;
        for (let i = 0; i < this.imageBuffer.length; i += chunkSize) {
            const chunk = this.imageBuffer.slice(i, Math.min(i + chunkSize, this.imageBuffer.length));
            await this.sendData(Array.from(chunk));
        }

        // Display update
        await this.sendCommand(0x22);
        await this.sendData(0xF7);
        await this.sendCommand(0x20);
        await this.waitUntilIdle();
    }

    // Factory methods
    static create(colorMode = 'mono', options = {}) {
        return new EPD2in7({ ...options, colorMode });
    }
}

module.exports = {
    EPD2in7,
    createMono: (options) => EPD2in7.create('mono', options),
    create4Gray: (options) => EPD2in7.create('4gray', options)
};